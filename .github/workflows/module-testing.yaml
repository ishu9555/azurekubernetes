name: Module Testing

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '**/*.tf'               ## trigger if any terraform file has ben modified.
      - 'scripts/*.sh'          ## trigger if any involved script has been modified.
      - 'tests/*.tftest.hcl'    ## trigger if any test has been modified.
      # - 'tests/*_test.go'       ## trigger if any test has been modified

permissions:
   pull-requests: write

concurrency:
  group: testing

jobs:
  moduleTesting:
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: "${{ vars.ARM_SUBSCRIPTION_ID }}"
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID}}"

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -recursive -check -diff
        continue-on-error: true
        working-directory: "${{ github.workspace }}"

      ## Static Analysis and Linting Test (Unit Testing)
      - name: Terraform validate on all examples
        run: |
          CURRENT_DIR="$(pwd)"
          for dir in ./examples/*; do
            if [[ -d "$dir" ]]; then
              echo "$dir"
              cd "$dir" || exit
              terraform init
              terraform validate
              cd "${CURRENT_DIR}" || exit
            fi
          done

      ## Integrating testing using terraform native testing
      - name: Testing complete example
        working-directory: "${{ github.workspace }}/tests"
        id: testing
        run: |
          terraform init
          terraform test -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && always() && !cancelled()
        env:
          TEST_OUTPUT: "${{ steps.testing.outputs.stdout }}"
          TEST_ERROR: "${{ steps.testing.outputs.stderr }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style:')
            })

            // 2. Prepare format of the comment
            const output = `### Terraform Format and Style:  ðŸ–Œ\`${{ steps.fmt.outcome }}\`

            \`\`\`hcl\n
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`

            ### :gear: **Test Results** :gear:\`: ${{ steps.testing.outcome }}\`

            - \`Test Output:\`

            \`\`\`bash\n
            ${process.env.TEST_OUTPUT}
            \`\`\`

            - \`Test Error Message:\`

            \`\`\`bash\n
            ${process.env.TEST_ERROR}
            \`\`\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 4. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      # - name: Comment the Test Result on PR
      #   if: ${{ always() &&  !cancelled() }}
      #   uses: thollander/actions-comment-pull-request@v2
      #   with:
      #     reactions: rocket
      #     comment_tag: testing-result
      #     mode: recreate
      #     message: |
      #       ### :gear: **Testing Results** :gear:
      #       - `Standard Output`

      #       ```bash
      #       ${{ steps.testing.outputs.stdout }}
      #       ```
      #       - `Error Message`

      #       ```bash
      #       ${{ steps.testing.outputs.stderr }}
      #       ```

      # - name: Set up Go
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version: '1.21.x'
      #     cache: false

      # - name: Testing examples with Terratest
      #   run: go test -v -timeout=60m
      #   working-directory: "${{ github.workspace }}/tests"
